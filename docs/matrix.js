const arcanaNames = {
  1: "–ò–ª–±—ç—á–∏–Ω ‚Äî –•“Ø—Å—ç–ª –∑–æ—Ä–∏–≥, —Å–∞–Ω–∞–∞—á–∏–ª–≥–∞",
  2: "–î—ç—ç–¥ —Å–∞–Ω–≤–∞–∞—Ä—Ç–∞–Ω ‚Äî –ó”©–Ω —Å–æ–≤–∏–Ω, –º—ç—Ä–≥—ç–Ω —É—Ö–∞–∞–Ω",
  3: "–•–∞—Ç–∞–Ω —Ö–∞–∞–Ω ‚Äî –ë“Ø—Ç—ç—ç–ª—á –±–∞–π–¥–∞–ª, —Ö–∞–ª–∞–º–∂",
  4: "–≠–∑—ç–Ω —Ö–∞–∞–Ω ‚Äî –¢–æ–≥—Ç–≤–æ—Ä—Ç–æ–π –±–∞–π–¥–∞–ª, –º–∞–Ω–ª–∞–π–ª–∞–ª",
  5: "–•–∏–µ—Ä–æ—Ñ–∞–Ω—Ç ‚Äî –°“Ø–Ω—Å–ª—ç–≥ –º—ç–¥–ª—ç–≥, —É–ª–∞–º–∂–ª–∞–ª",
  6: "–•–∞–π—Ä–ª–∞–≥—á–∏–¥ ‚Äî –°–æ–Ω–≥–æ–ª—Ç, —Ö–∞—Ä–∏–ª—Ü–∞–∞",
  7: "–°“Ø–π—Ö —Ç—ç—Ä—ç–≥ ‚Äî –ó–æ—Ä–∏–ª–≥–æ, —è–ª–∞–ª—Ç",
  8: "–®—É–¥–∞—Ä–≥–∞ —ë—Å ‚Äî “Æ–Ω—ç–Ω—á –±–∞–π–¥–∞–ª, —Ö–∞—Ä–∏—É—Ü–ª–∞–≥–∞",
  9: "–î–∞—è–∞–Ω—á ‚Äî –ë—è—Å–∞–ª–≥–∞–ª, –º—ç—Ä–≥—ç–Ω —É—Ö–∞–∞–Ω",
  10: "–ê–∑—ã–Ω —Ö“Ø—Ä–¥ ‚Äî ”®”©—Ä—á–ª”©–ª—Ç, –±–æ–ª–æ–º–∂",
  11: "–•“Ø—á —á–∞–¥–∞–ª ‚Äî –¢—ç–≤—á—ç—ç—Ä, –¥–æ—Ç–æ–æ–¥ —Ö“Ø—á",
  12: "–î“Ø“Ø–∂–ª—ç–≥–¥—Å—ç–Ω —Ö“Ø–Ω ‚Äî –ó–æ–ª–∏–æ—Å, —Ö“Ø–ª—ç—ç–Ω –∑”©–≤—à”©”©—Ä”©—Ö",
  13: "“Æ—Ö—ç–ª ‚Äî ”®”©—Ä—á–ª”©–ª—Ç, —à–∏–Ω—ç —ç—Ö–ª—ç–ª",
  14: "–ó–æ—Ö–∏—Ü—É—É–ª–∞–ª—Ç ‚Äî –¢—ç–Ω—Ü–≤—ç—Ä, –¥–∞—Å–∞–Ω –∑–æ—Ö–∏—Ü–æ–ª",
  15: "–ß”©—Ç–≥”©—Ä ‚Äî –•–∞–º–∞–∞—Ä–∞–ª, —É—Ä—É—É —Ç–∞—Ç–∞–ª—Ç",
  16: "–¶–∞–º—Ö–∞–≥ ‚Äî –ì—ç–Ω—ç—Ç–∏–π–Ω ”©”©—Ä—á–ª”©–ª—Ç, –Ω—É—Ä–∞–ª—Ç",
  17: "–û–¥ ‚Äî –ò—Ç–≥—ç–ª –Ω–∞–π–¥–≤–∞—Ä, —É—Ä–∞–º –∑–æ—Ä–∏–≥",
  18: "–°–∞—Ä ‚Äî –ó”©–Ω —Å–æ–≤–∏–Ω, —Ö—É—É—Ä–º–∞–≥ –±–∞–π–¥–∞–ª",
  19: "–ù–∞—Ä ‚Äî –ê–º–∂–∏–ª—Ç, –±–∞—è—Ä —Ö”©”©—Ä",
  20: "–®“Ø“Ø—Ö ‚Äî –£—Ö–∞–º—Å—Ä—ã–Ω —Å—ç—Ä–≥—ç–ª—Ç, ”©”©—Ä—á–ª”©–ª—Ç",
  21: "–î—ç–ª—Ö–∏–π ‚Äî –ë“Ø—Ç—ç–Ω –±–∞–π–¥–∞–ª, –±–∏–µ–ª—ç–ª—Ç",
  22: "–®–æ–≥–ª–æ–≥—á ‚Äî –≠—Ä—Ö —á”©–ª”©”©, –∞–¥–∞–ª —è–≤–¥–∞–ª"
};


// 1‚Äì22-–¥ –±–∞–≥–∞—Å–≥–∞—Ö —Ñ—É–Ω–∫—Ü
function reduceToArcana(num) {
  while (num > 22) {
    num = num.toString().split('').reduce((sum, d) => sum + parseInt(d), 0);
  }
  return num === 0 ? 22 : num;
}

// “Æ–Ω–¥—Å—ç–Ω –∞—Ä–∫–∞–Ω—É—É–¥—ã–≥ —Ç–æ–æ—Ü–æ–æ–ª–æ—Ö
function calculateMatrixArcanas(birthdate) {
  const [yearStr, monthStr, dayStr] = birthdate.split("-");
  const year = parseInt(yearStr);
  const month = parseInt(monthStr);
  const day = parseInt(dayStr);

  const dayArc = reduceToArcana(day);
  const monthArc = reduceToArcana(month);
  const yearArc = reduceToArcana(
    yearStr.split("").reduce((sum, d) => sum + parseInt(d), 0)
  );

  const karmicSum = dayArc + monthArc + yearArc;
  const karmicArc = reduceToArcana(karmicSum);
  const soulArc = reduceToArcana(
    karmicArc.toString().split("").reduce((sum, d) => sum + parseInt(d), 0)
  );

  return {
    day: dayArc,
    month: monthArc,
    year: yearArc,
    karmic: karmicArc,
    soul: soulArc
  };
}

// –¢–∞–π–ª–∞–Ω “Ø“Ø—Å–≥—ç—Ö —Ñ—É–Ω–∫—Ü
function generateMatrixReport(birthdate) {
  const resultDiv = document.getElementById("matrixResult");
  if (!resultDiv) {
    console.error("‚ùå matrixResult div –æ–ª–¥—Å–æ–Ω–≥“Ø–π.");
    return;
  }

  const arc = calculateMatrixArcanas(birthdate);

  console.log("‚úÖ –ê—Ä–∫–∞–Ω—É—É–¥:", arc); // Debug log

  let html = `<ul>`;
  html += `<li>üìÖ ”®–¥—Ä–∏–π–Ω –ê—Ä–∫–∞–Ω: <strong>${arc.day}</strong> ‚Äî ${arcanaDescriptions[arc.day]}</li>`;
  html += `<li>üìÜ –°–∞—Ä—ã–Ω –ê—Ä–∫–∞–Ω: <strong>${arc.month}</strong> ‚Äî ${arcanaDescriptions[arc.month]}</li>`;
  html += `<li>üìà –ñ–∏–ª–∏–π–Ω –ê—Ä–∫–∞–Ω: <strong>${arc.year}</strong> ‚Äî ${arcanaDescriptions[arc.year]}</li>`;
  html += `<li>üåÄ “Æ–π–ª–∏–π–Ω “Ø—Ä–∏–π–Ω –ê—Ä–∫–∞–Ω: <strong>${arc.karmic}</strong> ‚Äî ${arcanaDescriptions[arc.karmic]}</li>`;
  html += `<li>üíñ –°—ç—Ç–≥—ç–ª–∏–π–Ω –ê—Ä–∫–∞–Ω: <strong>${arc.soul}</strong> ‚Äî ${arcanaDescriptions[arc.soul]}</li>`;
  html += `</ul>`;

  resultDiv.innerHTML = html;
}
<script
function reduceToArcana(num) {
  while (num > 22) {
    num = num.toString().split('').reduce((a, b) => a + parseInt(b), 0);
  }
  return num === 0 ? 22 : num;
}

function calculateMatrixPoints(day, month, year) {
  const arc = {};
  const dayArc = reduceToArcana(day);
  const monthArc = reduceToArcana(month);
  const yearArc = reduceToArcana(year.toString().split('').reduce((a, b) => a + parseInt(b), 0));

  arc.A = reduceToArcana(day + month);
  arc.B = reduceToArcana(month + yearArc);
  arc.C = reduceToArcana(arc.A + arc.B);
  arc.D = reduceToArcana(arc.A + arc.C);
  arc.G = reduceToArcana(day + yearArc);

  return arc;
}
// A‚ÄìG —Ü—ç–≥–∏–π–Ω “Ø—Ä –¥“Ø–Ω–≥ —Ö–∞—Ä—É—É–ª–∞—Ö
const matrixList = document.getElementById('matrix-list');
if (matrixList) {
  matrixList.innerHTML = '';
  for (let key in arc) {
    const num = arc[key];
    const name = arcanaNames[num] || '';
    matrixList.innerHTML += `<li><b>${key}</b> —Ü—ç–≥: –ê—Ä–∫–∞–Ω ${num} ‚Äî ${name}</li>`;
  }
}
const birth = new Date(date);
const day = birth.getDate();
const month = birth.getMonth() + 1;
const year = birth.getFullYear();
calculateMatrixPoints(day, month, year);
