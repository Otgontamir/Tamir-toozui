function reduceToSingleDigit(num) {
  while (num > 9 && num !== 11 && num !== 22 && num !== 33) {
    num = num.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);
  }
  return num;
}

function getNameNumber(name) {
  const letterMap = {
    1: ['–ê', '–ò', '–†', '–®'],
    2: ['–ë', '–ô', '–°', '–©'],
    3: ['–í', '–ö', '–¢', '–™'],
    4: ['–ì', '–õ', '–£', '–´'],
    5: ['–î', '–ú', '“Æ', '–¨'],
    6: ['–ï', '–ù', '–§', '–≠'],
    7: ['–Å', '–û', '–•', '–Æ'],
    8: ['–ñ', '”®', '–¶', '–Ø'],
    9: ['–ó', '–ü', '–ß']
  };

  let total = 0;
  for (let char of name.toUpperCase()) {
    for (let key in letterMap) {
      if (letterMap[key].includes(char)) {
        total += parseInt(key);
        break;
      }
    }
  }
  return reduceToSingleDigit(total);
}

function generateMatrixReport(birthDateStr, name) {
  const date = new Date(birthDateStr);
  const day = reduceToSingleDigit(date.getDate());
  const month = reduceToSingleDigit(date.getMonth() + 1);
  const year = reduceToSingleDigit(date.getFullYear().toString().split('').reduce((sum, d) => sum + parseInt(d), 0));
  const lifePath = reduceToSingleDigit(day + month + year);
  const nameNumber = getNameNumber(name);
  const vibration = reduceToSingleDigit(lifePath + nameNumber);

  const chakra = analyzeChakra(lifePath, nameNumber);
  const yinYang = analyzeYinYang(nameNumber, vibration);

  return `
    üî¢ <b>–ê–º—å–¥—Ä–∞–ª—ã–Ω –∑–∞–º—ã–Ω —Ç–æ–æ:</b> ${lifePath}<br/>
    üß¨ <b>–ù—ç—Ä–Ω–∏–π —Ç–æ–æ:</b> ${nameNumber}<br/>
    üéµ <b>–ù–∏–π–ª–±—ç—Ä —á–∏—á–∏—Ä–≥—ç—ç:</b> ${vibration}<br/><br/>
    
    üßò‚Äç‚ôÄÔ∏è <b>–ß–∞–∫—Ä–∞ –æ–Ω–æ—à:</b><br/>
    ${chakra}<br/>
    
    ‚òØÔ∏è <b>–ò–Ω—å –Ø–Ω –±–∞–ª–∞–Ω—Å:</b><br/>
    ${yinYang}<br/>
    
    ü™Ñ <b>–ú–∞—Ç—Ä–∏—Ü—ã–Ω —Ç–∞–π–ª–±–∞—Ä:</b><br/>
    –≠–Ω–¥ —Ö—É–≤—å —Ç–∞–≤–∏–ª–∞–Ω, “Ø–π–ª–∏–π–Ω “Ø—Ä, –º”©–Ω —á–∞–Ω–∞—Ä, –∞—Ä—Ö–µ—Ç–∏–ø —Ç–∞–π–ª–±–∞—Ä—É—É–¥ –¥–∏–Ω–∞–º–∏–∫–∞–∞—Ä –æ—Ä–Ω–æ.
  `;
}
